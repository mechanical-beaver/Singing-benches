#include <Arduino.h>
#include <BLE2902.h>
#include <BLE2904.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>

#include <string>

#include "BLECharacteristic.h"
#include "BLESecurity.h"
#include "HardwareSerial.h"
#include "WString.h"
#include "esp32-hal.h"

BLEServer *pServer = nullptr;
BLECharacteristic *pTxCharacteristic;
bool deviceConnected = false;
bool oldDeviceConnected = false;

// UUID’ы сервиса и характеристик (как у UART BLE)
#define SERVICE_UUID "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer *pServer) { deviceConnected = true; }

  void onDisconnect(BLEServer *pServer) { deviceConnected = false; }
};

class MyCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) {
    std::string rxValue = pCharacteristic->getValue();
    if (rxValue.length() > 0) {
      Serial.println(rxValue.c_str()); // BLE → Serial
    }
  }
};

void setup() {
  Serial.begin(115200);

  BLEDevice::init("ESP32 BLE UART");

  BLESecurity *pSecurity = new BLESecurity();
  pSecurity->setAuthenticationMode(ESP_LE_AUTH_REQ_SC_MITM_BOND);
  pSecurity->setCapability(ESP_IO_CAP_OUT); // клиент вводит PIN
  pSecurity->setInitEncryptionKey(ESP_BLE_ENC_KEY_MASK | ESP_BLE_ID_KEY_MASK);
  pSecurity->setKeySize(16);
  pSecurity->setStaticPIN(123456); // <-- PIN-код

  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Характеристика TX — ESP32 → BLE клиент (NOTIFY)
  pTxCharacteristic = pService->createCharacteristic(
      CHARACTERISTIC_UUID_TX, BLECharacteristic::PROPERTY_NOTIFY);
  pTxCharacteristic->addDescriptor(new BLE2902());

  // Характеристика RX — BLE клиент → ESP32 (WRITE)
  BLECharacteristic *pRxCharacteristic = pService->createCharacteristic(
      CHARACTERISTIC_UUID_RX, BLECharacteristic::PROPERTY_WRITE);
  pRxCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();
  pServer->getAdvertising()->start();

  Serial.println("Waiting for BLE client to connect...");
}

void loop() {
  // Если BLE клиент подключен и есть данные в Serial
  if (deviceConnected && Serial.available()) {
    String input = Serial.readStringUntil('\n');
    input.trim(); // удалить \r и пробелы, если есть

    if (input.length() > 0) {
      // Отправка BLE клиенту
      pTxCharacteristic->setValue(input.c_str());
      pTxCharacteristic->notify();
    }
  }

  // Обработка отключения и перезапуска рекламы
  if (!deviceConnected && oldDeviceConnected) {
    delay(500);
    pServer->startAdvertising();
    Serial.println("BLE client disconnected. Start advertising...");
    oldDeviceConnected = deviceConnected;
  }

  // Обработка нового подключения
  if (deviceConnected && !oldDeviceConnected) {
    Serial.println("BLE client connected.");
    oldDeviceConnected = deviceConnected;
  }
}
